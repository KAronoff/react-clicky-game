{"version":3,"sources":["components/card/card.js","components/wrapper/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","image","alt","name","onClick","handleCharachterClick","id","Wrapper","concat","currentScore","highScore","children","App","state","characterList","characterListId","correctguess","newCharacterList","Object","toConsumableArray","_this","forEach","element","clicked","handleCorrectGuess","handleIncorrectGuess","alert","setState","newScore","shuffledCharacters","sort","Math","random","console","log","_this2","this","wrapper","map","character","card","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iiIAmBeA,MAdf,SAAeC,GACb,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,MAAOF,UAAU,eACjCG,IAAKP,EAAMQ,KACXC,QAAS,kBAAMT,EAAMU,sBAAsBV,EAAMW,KACjDA,GAAIX,EAAMW,cCYDC,MAtBf,SAAkBZ,GAChB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,8BAAAU,OAAyBb,EAAMc,eAD/B,MAIAb,EAAAC,EAAAC,cAAA,2BAAAU,OAAsBb,EAAMe,cAK9Bd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVJ,EAAMgB,mBCkEEC,oNA3EbC,MAAQ,CACNC,cAAeA,EACfL,aAAc,EACdC,UAAW,KAGfL,sBAAwB,SAACU,GACvB,IAAIC,GAAe,EAEbC,EAAgBC,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMC,eACxCG,EAAiBI,QAAQ,SAAAC,GAEvB,GAAIA,EAAQhB,KAAOS,IACO,IAApBO,EAAQC,QAGV,OAFAD,EAAQC,SAAU,OAClBP,GAAe,KAMrBA,EAAeI,EAAKI,mBAAmBP,GAAoBG,EAAKK,qBAAqBR,MAIvFQ,qBAAuB,SAACR,GACtBS,MAAM,aACNN,EAAKO,SAAS,CACZlB,aAAc,EACdK,cAAeA,OAKnBU,mBAAqB,SAACP,GAEpB,IAAMW,EAAWR,EAAKP,MAAMJ,aAAe,EAEvCC,EAAYU,EAAKP,MAAMH,UACvBkB,GAAYR,EAAKP,MAAMH,YACzBA,EAAYkB,GAGd,IAAMC,EAAqBZ,EAAiBa,KAAK,iBAAM,GAAMC,KAAKC,WAGlEZ,EAAKO,SAAS,CACZlB,aAAcmB,EACdlB,UAAWA,EACXI,cAAee,IAEjBI,QAAQC,IAAI,oFAEL,IAAAC,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAACuC,EAAD,CACA5B,aAAc2B,KAAKvB,MAAMJ,aACzBC,UAAW0B,KAAKvB,MAAMH,WAElB0B,KAAKvB,MAAMC,cAAcwB,IAAI,SAAAC,GAC3B,OACE3C,EAAAC,EAAAC,cAAC0C,EAAD,CACAC,IAAKF,EAAUjC,GACfH,KAAMoC,EAAUpC,KAChBF,MAAOsC,EAAUtC,MACjBK,GAAIiC,EAAUjC,GACdD,sBAAuB8B,EAAK9B,kCAnEtBqC,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8c07743b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\n\n\nfunction Card (props){\n  return (\n\n    <div className=\"col-2 col-md-2\">\n    <div className=\"card\">\n      <img src={props.image} className=\"card-img-top\"\n      alt={props.name}\n      onClick={() => props.handleCharachterClick(props.id)}\n      id={props.id}/>\n    </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Wrapper (props){\n  return (\n  <div className=\"container\">\n  <div className=\"row\">\n    <div className=\"col-12 col-md-12\">\n    <span>{`Current Score: ${props.currentScore}`}\n    </span> || \n\n    <span>{`High Score: ${props.highScore}`}\n    </span>\n    \n    </div>\n  </div>\n  <div className=\"row\">\n      {props.children}\n    \n  </div>\n  \n  </div>\n  )\n}\n\nexport default Wrapper;","import React from 'react';\nimport Card from \"../src/components/card/card\"\nimport Wrapper from \"../src/components/wrapper/wrapper\"\nimport characterList from \"../src/stuff.json\"\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    characterList: characterList,\n    currentScore: 0,\n    highScore: 0\n  }\n\nhandleCharachterClick = (characterListId) => {\n  let correctguess = false;\n  // make copy of this.state.charactList\n  const newCharacterList = [...this.state.characterList];\n  newCharacterList.forEach(element => {\n    \n    if (element.id === characterListId){\n      if (element.clicked === false){\n        element.clicked = true;\n        correctguess = true;\n        return ;\n      }\n    }\n  })\n\n  correctguess ? this.handleCorrectGuess(newCharacterList) : this.handleIncorrectGuess(newCharacterList)\n  \n}\n\nhandleIncorrectGuess = (newCharacterList) => {\n  alert(\"You lose.\")\n  this.setState({\n    currentScore: 0,\n    characterList: characterList\n  })\n  \n}\n\nhandleCorrectGuess = (newCharacterList) => {\n  // increase score in state by one\n  const newScore = this.state.currentScore + 1;\n  // if score is greater than the high score in state, high score is now set to the current score\n  let highScore = this.state.highScore;\n  if (newScore >= this.state.highScore) {\n    highScore = newScore;\n  }\n  // shuffle newCharacterList\n  const shuffledCharacters = newCharacterList.sort(() => 0.5 - Math.random());\n\n  // use this.setState to update state with new values\n  this.setState({\n    currentScore: newScore,\n    highScore: highScore,\n    characterList: shuffledCharacters\n  })\n  console.log(\"correct\")\n}\nrender (){\n  return (\n    <Wrapper \n    currentScore={this.state.currentScore}\n    highScore={this.state.highScore}>\n      {\n        this.state.characterList.map(character => {\n          return (\n            <Card \n            key={character.id}\n            name={character.name}\n            image={character.image}\n            id={character.id}\n            handleCharachterClick={this.handleCharachterClick}\n            />\n        )}\n        )}\n    </Wrapper>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}